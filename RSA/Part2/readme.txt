Project done by Karthik Venkat using the sha256 library made by Olivier Gay and the bigint435 library made by Matt Mcutchen.

Part1:

Part 1 of the project generates the values for p, q, e, d, n and phi. The Fermatâ€™s test is implemented using the library-provided modexp functions, and the pseudo-random numbers are generated by seeing through srand(time(0)) and then added successively until a number that is about 156 digits (or 512 bits in size) is generated.

Since all prime numbers are inherently coprime/relatively prime with all other numbers, the random prime number generation function is used to generate e as well. 

n is computed as the product of p and q, while phi is the product of p-1 and q-1.

d is computed using the modinv function provided in the library, which invokes the extended euclidian algorithm which is also provided by the library.

These numbers are then written to their respective text files in the main function.

Part2:

Part 2 uses the SHA-256 hashing function to generate a unique hash value for the contents of a file given as input. The file is encrypted using the public key. 

Part 2 requires that the executable be run from a directory containing e_n.txt and d_n.txt and assumes that this is already true. 

A string buffer containing the contents of the file is created and that is used by the hashing function to generate the unique hash value. This hash value is then encrypted using the key value stored in e_n.txt.
The file is then signed using the keys in d_n.txt and a new signed file is created. The verification of the file is done by verifying the signature of the file, and comparing that to the value of the original encrypted file, which allows us to confirm if the file is modified or authentic. 